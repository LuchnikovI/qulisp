use std::str::FromStr;
use std::rc::Rc;
use lalrpop_util::ParseError;
use crate::ast::{SExpr, QLispParseError};

grammar;

extern {
    type Error = QLispParseError;
}

match {
    r"\(" => LPAREN,
    r"\)" => RPAREN,
    r"\." => DOT,
    r"[1-9]+[0-9]*|0" => INT,
    r"([0-9]+\.[0-9]*|[0-9]*\.[0-9]+)([eE][-+]?[0-9]+)?" => FLOAT,
    r#"\"[^\"]*\""# => STR,
    r"\s*" => { },
    r";[^\n\r]*[\n\r]*" => { },
    r"`" => QUOTE
} else {
    r"[^[:space:]\(\)]+" => SY,
}

SExpr: SExpr<'input> = {
    // pair
    <l:@L> LPAREN <s1:SExpr> DOT <s2:SExpr> RPAREN <r:@R> => {
        SExpr::pair(s1, s2, Some((l , r)))
    },
    // list
    <l:@L> LPAREN <sexprs:SExpr*> RPAREN <r:@R> => {
        SExpr::list(sexprs.into_iter().collect::<Vec<_>>(), Some((l , r)))
    },
    // quoted
    <l:@L> QUOTE <sexpr:SExpr> <r:@R> => {
        sexpr.quote(Some((l, r)))
    },
    // int
    <l:@L> <i:INT> <r:@R> =>? Ok(SExpr::int(i64::from_str(i).map_err(
        |_| ParseError::User {
            error: QLispParseError::CannotParseInt(l, r)
        }
    )?, Some((l, r)))),
    // float
    <l:@L> <f:FLOAT> <r:@R> =>? Ok(SExpr::float(f64::from_str(f).map_err(
        |_| ParseError::User {
            error: QLispParseError::CannotParseFloat(l, r)
        }
    )?, Some((l, r)))),
    // string
    <l:@L> <s:STR> <r:@R> => SExpr::string(s.trim_matches('\"').to_owned(), Some((l, r))),
    // symbol
    <l:@L> <sy:SY> <r:@R> => SExpr::symbol(sy, Some((l, r))),
}

pub Program: Vec<Rc<SExpr<'input>>> = {
    <l:@L> <sexprs:SExpr*> <r:@R> => {
        sexprs.into_iter().map(|x| Rc::new(x)).collect::<Vec<_>>()
    },
}
